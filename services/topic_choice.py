from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from services.user_state import UserStateManager
from handlers.profile_questions import send_next_profile_question

TOPIC_CHOICES = {
    "breastfeeding": "ü§± –ì—Ä—É–¥–Ω–µ –≤–∏–≥–æ–¥–æ–≤—É–≤–∞–Ω–Ω—è",
    "solids": "ü•£ –ü—Ä–∏–∫–æ—Ä–º",
    "sleep": "üëº –°–æ–Ω –º–∞–ª—é–∫–∞",
    "pregnancy": "ü§∞ –í–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å",
    "development": "üß† –†–æ–∑–≤–∏—Ç–æ–∫ –¥–∏—Ç–∏–Ω–∏",
    "tantrums": "üò° –Ü—Å—Ç–µ—Ä–∏–∫–∏, –µ–º–æ—Ü—ñ—ó",
    "mental_health": "üíõ –ï–º–æ—Ü—ñ—ó –º–∞–º–∏",
    "partner_support": "üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∑ –±–æ–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
    "routine": "‚è∞ –î–µ–Ω–Ω–∏–π —Ä–µ–∂–∏–º",
    "teething": "ü¶∑ –ü—Ä–æ—Ä—ñ–∑—É–≤–∞–Ω–Ω—è –∑—É–±—ñ–≤"
}

def build_topic_keyboard(selected):
    buttons = []
    for key, label in TOPIC_CHOICES.items():
        prefix = "‚úÖ" if key in selected else "‚¨úÔ∏è"
        buttons.append([InlineKeyboardButton(f"{prefix} {label}", callback_data=f"toggle_topic:{key}")])
    buttons.append([InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="save_topics")])
    return InlineKeyboardMarkup(buttons)

async def send_topic_selection_keyboard(chat_id, context, state):
    selected = state.get("preferred_topics", [])
    keyboard = build_topic_keyboard(selected)
    await context.bot.send_message(
        chat_id=chat_id,
        text="–Ø–∫—ñ —Ç–µ–º–∏ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤—ñ? –ú–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞:",
        reply_markup=keyboard
    )

async def handle_topic_callback(update, context):
    query = update.callback_query
    await query.answer()
    state = UserStateManager(str(query.from_user.id))

    data = query.data
    profile_data = state.get("profile_data", {})
    selected = set(profile_data.get("preferred_topics", []))

    if data.startswith("toggle_topic:"):
        topic = data.split(":")[1]
        if topic not in TOPIC_CHOICES:
            return

        if topic in selected:
            selected.remove(topic)
        else:
            selected.add(topic)

        profile_data["preferred_topics"] = list(selected)
        state.set("profile_data", profile_data)
        await query.edit_message_reply_markup(reply_markup=build_topic_keyboard(selected))

    elif data == "save_topics":
        if not selected:
            await query.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ç–µ–º—É üôè", show_alert=True)
            return

        await query.edit_message_reply_markup(reply_markup=None)

        profile_data["preferred_topics"] = list(selected)
        state.set("profile_data", profile_data)
        state.set("profile_progress", state.get("profile_progress", 0) + 1)

        await send_next_profile_question(update.effective_message, context, state)